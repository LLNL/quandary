#include "defs.hpp"
#include <math.h>
#include <petscts.h>
#include <vector>
#include <assert.h>
#include <iostream> 
#include <controlbasis.hpp>

#pragma once

/**
 * @brief Interface for receiving Hamiltonian data from Python.
 *
 * This class provides functionality to read system and control Hamiltonians
 * from files generated by Python scripts. It supports both Lindblad and
 * Schroedinger solvers and handles matrix data communication between
 * Python and the C++ Quandary core.
 */
class PythonInterface{

  protected:

    LindbladType lindbladtype; ///< Type of solver (Lindblad vs Schroedinger)
    int dim_rho; ///< Dimension of the Hilbert space (N)
    std::string hamiltonian_file; ///< Filename for Hamiltonian data ('none' if not used)
    int mpirank_world; ///< Rank of global MPI communicator
    bool quietmode; ///< Flag for quiet mode operation

	public:
    PythonInterface();

    /**
     * @brief Constructor with Hamiltonian file specification.
     *
     * @param hamiltonian_file_ Path to file containing Hamiltonian data
     * @param lindbladtype_ Type of solver (Lindblad or Schroedinger)
     * @param dim_rho_ Dimension of the Hilbert space
     * @param quietmode_ Flag for quiet operation
     */
    PythonInterface(std::string hamiltonian_file_, LindbladType lindbladtype_, int dim_rho_, bool quietmode_);

    ~PythonInterface();

  /**
   * @brief Reads the constant system Hamiltonian from file.
   *
   * Note: The Hamiltonian matrix Hd must be real-valued.
   *
   * @param Bd Reference to PETSc matrix to store the system Hamiltonian
   */
  void receiveHsys(Mat& Bd);

  /**
   * @brief Receives real and imaginary control operators from file.
   *
   * Reads control Hamiltonian matrices for each oscillator from the
   * Hamiltonian file and stores them in the provided matrix vectors.
   *
   * @param noscillators Number of oscillators in the system
   * @param Ac_vec Reference to vector of vectors storing real parts of control matrices
   * @param Bc_vec Reference to vector of vectors storing imaginary parts of control matrices
   */
  void receiveHc(int noscillators, std::vector<std::vector<Mat>>& Ac_vec, std::vector<std::vector<Mat>>& Bc_vec);
};
