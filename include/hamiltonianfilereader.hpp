#include "defs.hpp"
#include <math.h>
#include <optional>
#include <petscts.h>
#include <vector>
#include <assert.h>
#include <iostream> 
#include <fstream>
#include <controlbasis.hpp>

#pragma once

/**
 * @brief Interface for reading Hamiltonian data from files.
 *
 * This class provides functionality to read system and control Hamiltonians
 * from files generated by the Python interface. It supports both Lindblad and
 * Schroedinger solver and handles matrix data communication.
 */
class HamiltonianFileReader{
  protected:

    LindbladType lindbladtype; ///< Type of solver (Lindblad vs Schroedinger)
    PetscInt dim_rho; ///< Dimension of the Hilbert space (N)
    std::optional<std::string> hamiltonian_file_Hsys; ///< Filename for system Hamiltonian data
    std::optional<std::string> hamiltonian_file_Hc; ///< Filename for control Hamiltonian data
    int mpirank_world; ///< Rank of global MPI communicator
    int mpisize_world; ///< Rank of global MPI communicator
    bool quietmode; ///< Flag for quiet mode operation

	public:
    HamiltonianFileReader();

    /**
     * @brief Constructor with Hamiltonian file specification.
     *
     * @param hamiltonian_file_Hsys Path to file containing system Hamiltonian data
     * @param hamiltonian_file_Hc Path to file containing control Hamiltonian data
     * @param lindbladtype_ Type of solver (Lindblad or Schroedinger)
     * @param dim_rho_ Dimension of the Hilbert space
     * @param quietmode_ Flag for quiet operation
     */
    HamiltonianFileReader(std::optional<std::string> hamiltonian_file_Hsys, std::optional<std::string> hamiltonian_file_Hc, LindbladType lindbladtype_, PetscInt dim_rho_, bool quietmode_);

    ~HamiltonianFileReader();

  /**
   * @brief Reads the constant system Hamiltonian from file.
   *
   * @param[out] Ad Reference to matrix that stores the real part of the system matrix for (-i*Hsys). Must be allocated. 
   * @param[out] Bd Reference to matrix that stores the imaginary part of the system matrix for (-i*Hsys). Must be allocated. 
   */
  void receiveHsys(Mat& Ad, Mat& Bd);

  /**
   * @brief Receives real and imaginary control operators from file.
   *
   * Reads control Hamiltonian matrices for each oscillator from the
   * Hamiltonian file and stores them in the provided matrix vectors.
   *
   * @param Ac_vec Reference to vector of matrices storing real parts of control system matrices. One per oscillator.
   * @param Bc_vec Reference to vector of matrices storing imaginary parts of control matrices. One per oscillator.
   */
  void receiveHc(std::vector<Mat>& Ac_vec, std::vector<Mat>& Bc_vec);
};
