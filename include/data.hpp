#include <string>
#include <sstream>
#include <cstring>
#include <iostream>
#include <fstream>
#include "util.hpp"
#include "defs.hpp"
#include <assert.h>
#include <petscts.h>
#include <vector>
#pragma once

/* Abstract base data class */
class Data{
  protected:
    int dim;              // Dimension of full vectorized system: N^2 for Lindblad or N for Schroedinger, or -1 if not learning.
    int npulses;          // Number of pulses

    double dt;             /* Sample rate of the data */
    std::vector<std::vector<Vec>> data; /* For each pulse_number: List of states at each data time-step */
    std::vector<std::string> data_name; /* Name of the data files */

	public:
    Data();
    Data(std::vector<std::string> data_name, int dim, int npulses = 1);
    virtual ~Data();

    /* Get number of data elements */
    int getNData(){ return data[0].size(); };

    /* Get data time-spacing */
    double getDt(){ return dt; };

    /* Get data trajectory element */
    Vec getData(int dataID, int pulse_num=0){ return data[pulse_num][dataID]; };
};

/* Class for data generated by Quandary simulations - any number of levels */
class SyntheticQuandaryData : public Data {
  public:
    SyntheticQuandaryData (std::vector<std::string> data_name, double data_tstop, int dim);
    ~SyntheticQuandaryData ();

    /* Loads data, returns the data sample time-step size */
    double loadData(double tstop = 1e+14);
};


/* Class for data generated on Tant, compatible with 231110_SG_Tant_2level */
class Tant2levelData : public Data {
  protected:
    double tstart; /* First data point */
    int nshots;    /* Number of shots */

  public:
    Tant2levelData(std::vector<std::string> data_name, double data_tstop, int dim, int npulses);
    ~Tant2levelData();

    /* Loads data, returns the data sample time-step size */
    double loadData(double tstop = 1e+14);
};