import pytest
import numpy as np
from quandary import Quandary
from utils import assert_results_equal

# Mark all tests in this file as regression tests
pytestmark = pytest.mark.regression

EXPECTED_LENGTH = 1222
EXPECTED_INFIDELITY = 9.579442993001841e-05

EXPECTED_PT = [
    [
        6.616725193332, 0.594108955114234, -4.6612041043857, -10.057008545847399, -16.7925272532101,
        -4.37803267051435, 29.429289693884897, -1.99065216688873, 1.55672833280728, -8.84077714799125
    ],
    [
        41.115114703615404, -126.979851925522, 1.95887435527856, -44.1884354195065, 69.1903244908076,
        98.6254243074309, -72.6834065507498, -7.877713819489899, -93.5283459543858, 12.9802269197434
    ],
]

EXPECTED_QT = [
    [
        12.2046682803128, -4.106223161934349, -4.25224002148494, 14.913352257247501, -10.267172008817,
        12.213110218227799, -7.2090372842489, -27.3356430221432, -0.0754141037646605, -14.1999385354707
    ],
    [
        -42.4224419634531, 70.5220436508868, -55.3237840325884, 138.403062344659, -27.9645427362594,
        -109.78387954138701, 41.9326700775612, -105.26165922349901, 115.179149640371, -3.45010594052695
    ],
]

EXPECTED_ENERGY = [
    [
        [
            0.0, 0.164018720327432, 0.681155470507073, 0.91595079897646, 0.409625193180763,
            0.0451618509044243, 0.145909796953593, 0.894811107898173, 0.276174785115582, 7.18972153758039e-05
        ],
        [
            0.0, 0.148554713902497, 0.677563453874268, 0.883069457661089, 0.433062321962301,
            0.0409323679823027, 0.237968075668888, 0.937615058415591, 0.288744113780608, 6.80597196600991e-05
        ],
        [
            1.0, 0.833693887189515, 0.30231425655866, 0.0781041328616079, 0.612526687583752,
            0.950165031479551, 0.785949803569589, 0.0630467958468525, 0.713636929875362, 0.9999200364916
        ],
        [
            1.0, 0.853732678324426, 0.338966818414533, 0.122875610552277, 0.54478579702393,
            0.963740749531197, 0.830172323495192, 0.104527037572075, 0.7214441710184, 0.99994000664992
        ],
    ],
    [
        [
            0.0, 0.833380867552618, 0.211467502291388, 0.10772688588061, 0.994486567753026,
            0.332783402008406, 0.328512418616942, 0.849318770276658, 0.365928160207867, 6.3927010622781e-05
        ],
        [
            1.0, 0.165804605873793, 0.794830994785911, 0.891785033888527, 0.00521798681585307,
            0.658576469218537, 0.682364479561092, 0.154976310427688, 0.637505155319165, 0.999947805542938
        ],
        [
            0.0, 0.926141799780157, 0.636879769305457, 0.0297187946675154, 0.576532188630711,
            0.937277826669486, 0.1423287253708, 0.0620880380451264, 0.477483384114772, 0.999939141264031
        ],
        [
            1.0, 0.0746727268238372, 0.356821733548592, 0.970769285553542, 0.423763256939225,
            0.0713623024323497, 0.846794376113813, 0.933616880573983, 0.519083300077874, 4.91262629975248e-05
        ],
    ],
]

EXPECTED_POPULATION = [
    [
        [
            1.0, 0.835981279673114, 0.318844529497196, 0.0840492010301489, 0.590374806827084,
            0.954838149104735, 0.854090203057394, 0.105188892114705, 0.723825214898353, 0.999928102824303
        ],
        [
            1.0, 0.851445286098087, 0.322436546129973, 0.116930542347156, 0.566937678047111,
            0.959067632027563, 0.762031924344571, 0.0623849415993417, 0.71125588623519, 0.999931940321825
        ],
        [
            0.0, 0.166306112811131, 0.697685743445493, 0.921895867144501, 0.387473312423499,
            0.0498349685284324, 0.214050196441385, 0.936953204165973, 0.286363070138658, 7.99635494829092e-05
        ],
        [
            0.0, 0.146267321676212, 0.661033181589251, 0.87712438945341, 0.455214202982917,
            0.0362592504767486, 0.169827676515773, 0.89547296244067, 0.278555828995427, 5.99933849104876e-05
        ],
    ],
    [
        [
            1.0, 0.166619132447928, 0.788532497712881, 0.892273114125999, 0.00551343225482061,
            0.667216598000753, 0.671487581394045, 0.15068122973622, 0.634071839806068, 0.999936073029056
        ],
        [
            0.0, 0.834195394126791, 0.20516900521833, 0.108214966119718, 0.994782013193558,
            0.341423530791329, 0.317635520452367, 0.845023689587245, 0.362494844696633, 5.21944985474435e-05
        ],
        [
            1.0, 0.0738582002204882, 0.363120230698696, 0.970281205338593, 0.423467811376541,
            0.0627221733384974, 0.857671274640174, 0.937911961967699, 0.522516615899248, 6.08587770516464e-05
        ],
        [
            0.0, 0.925327273176801, 0.643178266455191, 0.0292307144521444, 0.576236743067622,
            0.928637697575596, 0.153205623897152, 0.0663831194387622, 0.480916699935952, 0.999950873771833
        ],
    ],
]

# Compare output to expected result for 10 points
NUM_SAMPLES = 10
SAMPLE_INDICES = [int(i * (EXPECTED_LENGTH - 1) / (NUM_SAMPLES - 1)) for i in range(NUM_SAMPLES)]


def test_example_cnot(mpi_exec):
    """Test CNOT gate optimization using Python interface."""

    freq01 = [4.80595, 4.8601]
    favg = sum(freq01)/len(freq01)
    rotfreq = favg*np.ones(len(freq01))
    T = 200.0

    unitary = np.identity(4)
    unitary[2, 2] = 0.0
    unitary[3, 3] = 0.0
    unitary[2, 3] = 1.0
    unitary[3, 2] = 1.0
    n_osc = 2
    n_levels = 4

    quandary = Quandary(
        freq01=freq01,
        Jkl=[0.005],
        rotfreq=rotfreq,
        T=T,
        targetgate=unitary,
        verbose=False,
        randomize_init_ctrl=False,
    )

    t, pt, qt, infidelity, energy, population = quandary.optimize(
        mpi_exec=mpi_exec,
        maxcores=2
    )

    assert_results_equal(
        t=t,
        pt=pt,
        qt=qt,
        infidelity=infidelity,
        energy=energy,
        population=population,
        T=T,
        n_osc=n_osc,
        n_levels=n_levels,
        expected_length=EXPECTED_LENGTH,
        expected_infidelity=EXPECTED_INFIDELITY,
        expected_pt=EXPECTED_PT,
        expected_qt=EXPECTED_QT,
        expected_energy=EXPECTED_ENERGY,
        expected_population=EXPECTED_POPULATION,
        sample_indices=SAMPLE_INDICES
    )
