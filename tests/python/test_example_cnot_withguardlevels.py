import os
import pytest
import numpy as np
from quandary import Quandary
from utils import assert_results_equal

# Mark all tests in this file as regression tests
pytestmark = pytest.mark.regression

EXPECTED_LENGTH = 1806
EXPECTED_INFIDELITY = 0.480188055481932

EXPECTED_PT = [
    [
        -3.89196260920326, -6.69814371177082, -9.20896335367253, -7.981320397746599, -3.36187997549283,
        -4.6970770222456, -10.0164546119019, -11.2224622837805, -8.33354767429947, -4.95697334818543
    ],
    [
        -6.48647374260631, -4.35103011119594, 7.081723515132199, 18.6998569666555, 26.3683265670305,
        24.8348573506472, 15.4646934377398, 3.37175363050847, -6.28742788663761, -7.36137743473769
    ],
]

EXPECTED_QT = [
    [
        12.1290294821262, 17.1562352925453, 16.841746061092298, 15.4699999874251, 10.259217466023001,
        -8.83471122356989, -14.3105635348399, -16.3085121425574, -17.2025933654577, -12.1886379441658
    ],
    [
        -10.1470331522652, -18.688440880792403, -23.635847402275, -22.136075762169398, -13.1942357679238,
        14.1015046555011, 22.4389342569253, 22.555547092136, 16.5938299318193, 8.48320408151263
    ],
]

EXPECTED_ENERGY = [
    [
        [
            0.0, 0.011870296095525, 0.0549129666577761, 0.121300531682623, 0.182155079950606,
            0.196249811103354, 0.15781831384911, 0.0960343416859211, 0.0396436169849094, 0.0129998178824294
        ],
        [
            0.0, 0.0129062587700882, 0.0570009187532015, 0.120028226159957, 0.168962621690027,
            0.166503578909807, 0.119440762207014, 0.0651696785233795, 0.0340064899053436, 0.038502126221005
        ],
        [
            1.0, 1.00604218340943, 0.984078386298889, 0.897698403495831, 0.813586980815862,
            0.793095365408016, 0.834523137010483, 0.905846679900428, 0.958608789131472, 0.971815385618592
        ],
        [
            1.0, 1.00663300051438, 0.982374995844373, 0.899642145587353, 0.841197229501374,
            0.852285120098703, 0.915301305879275, 0.991723517720418, 1.0179038097135, 0.991001018080102
        ],
    ],
    [
        [
            0.0, 0.0123980424997909, 0.0696972089115495, 0.188836900438941, 0.344802858282004,
            0.481236657027539, 0.577666595359302, 0.619001419491198, 0.592135582199842, 0.545075828331161
        ],
        [
            1.0, 1.00635402942333, 0.979367467879334, 0.84191613237523, 0.661629449782256,
            0.535302136943995, 0.452220823513964, 0.397744391779343, 0.396143400841863, 0.433577603144192
        ],
        [
            0.0, 0.0132763546579357, 0.0689189602642812, 0.185722461571837, 0.361686415675913,
            0.536533567686304, 0.661960751670318, 0.725648429614889, 0.714209494237174, 0.669775240154245
        ],
        [
            1.0, 1.00771345051939, 0.985560178408803, 0.858512578205778, 0.683930986888496,
            0.527935488691156, 0.3918057610893, 0.314382527869049, 0.323698288913921, 0.378657449280973
        ],
    ],
]

EXPECTED_POPULATION = [
    [
        [
            1.0, 0.988190700613443, 0.945887396889935, 0.880715286592028, 0.820079961642219,
            0.805543451673327, 0.847390213512399, 0.911186771519698, 0.963516042293813, 0.989000863070602
        ],
        [
            1.0, 0.987176432412105, 0.943914032049425, 0.881735467636543, 0.832225619095951,
            0.834306106268667, 0.88498000234694, 0.939790218211618, 0.968073231146879, 0.963863006144422
        ],
        [
            0.0, 0.0129222120656755, 0.0576374687847919, 0.125978662365299, 0.190583422639702,
            0.208877197419858, 0.169950900827144, 0.107255529146891, 0.0566579789205892, 0.0340643799998853
        ],
        [
            0.0, 0.013737247070628, 0.0569963384589609, 0.116041025988795, 0.160385019981892,
            0.152157990214599, 0.0957484420305465, 0.0369958197341599, 0.00962888724366689, 0.0174901622123016
        ],
    ],
    [
        [
            1.0, 0.987669259560173, 0.931618260807432, 0.81659123470023, 0.664457320205344,
            0.526169369009, 0.433465673647445, 0.397172071715213, 0.414765943365967, 0.456314836307081
        ],
        [
            0.0, 0.0134363754081634, 0.0713607410419241, 0.187952301372471, 0.343318559068717,
            0.482375643794349, 0.575313507496633, 0.616581579094136, 0.605102485593769, 0.570355694262822
        ],
        [
            1.0, 0.986814269304548, 0.932538248731494, 0.819977997187482, 0.652260357061717,
            0.480531804700496, 0.350635065956558, 0.288012360567328, 0.293823455478383, 0.33302551860158
        ],
        [
            0.0, 0.0137331854404214, 0.0646145921213013, 0.1703199835656, 0.33646082929512,
            0.506186014446804, 0.631909230819356, 0.692704761904455, 0.681287681740471, 0.635125720195589
        ],
    ],
]

# Compare output to expected result for 10 points
NUM_SAMPLES = 10
SAMPLE_INDICES = [int(i * (EXPECTED_LENGTH - 1) / (NUM_SAMPLES - 1)) for i in range(NUM_SAMPLES)]


def test_example_cnot_withguardlevels(mpi_exec, tmp_path, request):
    """Test CNOT gate optimization with guard levels using Python interface."""
    datadir_path = os.path.join(tmp_path, request.node.name)

    Ne = [2, 2]
    Ng = [2, 2]
    freq01 = [4.80595, 4.8601]
    selfkerr = [0.2, 0.2]
    Jkl = [0.005]
    favg = sum(freq01)/len(freq01)
    rotfreq = favg*np.ones(len(freq01))
    T = 10.0

    unitary = np.identity(4)
    unitary[2, 2] = 0.0
    unitary[3, 3] = 0.0
    unitary[2, 3] = 1.0
    unitary[3, 2] = 1.0

    spline_order = 0
    spline_knot_spacing = 1.0
    gamma_variation = 1.0
    control_enforce_BC = True

    n_osc = 2
    n_levels = 4

    quandary = Quandary(
        Ne=Ne,
        Ng=Ng,
        freq01=freq01,
        selfkerr=selfkerr,
        Jkl=Jkl,
        rotfreq=rotfreq,
        T=T,
        targetgate=unitary,
        verbose=False,
        rand_seed=1234,
        spline_order=spline_order,
        spline_knot_spacing=spline_knot_spacing,
        gamma_variation=gamma_variation,
        control_enforce_BC=control_enforce_BC,
    )

    t, pt, qt, infidelity, energy, population = quandary.optimize(
        mpi_exec=mpi_exec,
        maxcores=4,
        datadir=datadir_path,
    )

    assert_results_equal(
        t=t,
        pt=pt,
        qt=qt,
        infidelity=infidelity,
        energy=energy,
        population=population,
        T=T,
        n_osc=n_osc,
        n_levels=n_levels,
        expected_length=EXPECTED_LENGTH,
        expected_infidelity=EXPECTED_INFIDELITY,
        expected_pt=EXPECTED_PT,
        expected_qt=EXPECTED_QT,
        expected_energy=EXPECTED_ENERGY,
        expected_population=EXPECTED_POPULATION,
        sample_indices=SAMPLE_INDICES
    )
