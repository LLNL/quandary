import pytest
import numpy as np
from quandary import Quandary
from utils import assert_results_equal

# Mark all tests in this file as regression tests
pytestmark = pytest.mark.regression

EXPECTED_LENGTH = 1222
EXPECTED_INFIDELITY = 9.257378541704941e-05

EXPECTED_PT = [
    [
        1.39139720094627, -7.252599652352569, 4.47706380946171, 1.4726647949197, -1.19913109722706,
        -0.33927983009720397, 2.3595839470663598, 0.677966851416258, -7.29939358795371, 1.8307265770282999
    ],
    [
        -0.0733648695919313, -1.8066964117515698, 6.68654354551804, -7.48223143066535, 5.13340197845506,
        0.315835131695272, -3.73285646771321, 3.9510316874371703, -1.33023216001612, 0.124959893691128
    ],
]

EXPECTED_QT = [
    [
        -0.196580437889947, -4.8278406547759305, 3.6663142384181198, -1.80095432726682, 2.0377228566350696,
        -1.97182393857655, 1.80555521627317, -3.32011281124973, 5.250899308856639, -0.229292501560434
    ],
    [
        -0.600034770502575, 0.688006184634379, 1.84509450260025, -0.24432814453945298, -2.6551546671386603,
        7.474760031265401, -5.53602372411908, 1.5594733148807, -0.347284269350974, 0.043548086484513006
    ],
]

EXPECTED_ENERGY = [
    [
        [
            0.0, 0.0699185568731366, 0.182704095177448, 0.249731600013859, 0.470426559112901,
            0.447394659045756, 0.224091290602656, 0.0779512718954046, 0.0650377137298774, 6.22310457717102e-05
        ],
        [
            0.0, 0.0930391138135943, 0.23743892043364, 0.413114574406591, 0.550666725329946,
            0.459127111006311, 0.334506254691026, 0.144006964319411, 0.0876700328696583, 5.11545031070254e-05
        ],
        [
            1.0, 0.905603791137994, 0.78486272542267, 0.726997485982308, 0.579209752236972,
            0.537878098046528, 0.671699851041516, 0.898618730017578, 0.933934688944795, 0.999917511582725
        ],
        [
            1.0, 0.931438538247787, 0.794994259093699, 0.610156339798125, 0.399696963538377,
            0.555600132161797, 0.769702603924927, 0.879423033910962, 0.913357564385493, 0.999969102986179
        ],
    ],
    [
        [
            0.0, 0.0139344633082164, 0.171765683822903, 0.549172717868476, 0.50363006362385,
            0.311552152123449, 0.48754998982979, 0.249155258712721, 0.0145811031242011, 4.78606077574857e-05
        ],
        [
            1.0, 0.966726525551247, 0.819807830385754, 0.480870264221943, 0.509512169840825,
            0.673725087146305, 0.525882005326489, 0.740409351672592, 0.964210651043143, 0.999983363807341
        ],
        [
            0.0, 0.0539215132513357, 0.143866436910906, 0.382895489666004, 0.614576581108313,
            0.596135139899607, 0.633239241495552, 0.91162937655105, 0.984631303988097, 0.999934242114831
        ],
        [
            1.0, 0.965417497890465, 0.864560048886911, 0.587061528101101, 0.372281185307642,
            0.418587620841731, 0.353328763450195, 0.0988060135274491, 0.03657694219604, 3.4533577363965e-05
        ],
    ],
]

EXPECTED_POPULATION = [
    [
        [
            1.0, 0.930081443141761, 0.817295904842303, 0.75026840001086, 0.529573440922835,
            0.552605340998218, 0.775908709447833, 0.922048728161235, 0.934962286333544, 0.999937769021251
        ],
        [
            1.0, 0.90696088618882, 0.762561079569985, 0.586885425621664, 0.449333274709712,
            0.540872889042223, 0.665493745364733, 0.855993035741032, 0.912329967191519, 0.999948845559214
        ],
        [
            0.0, 0.0943962088645299, 0.215137274581816, 0.273002514036944, 0.420790247791917,
            0.462121901990549, 0.328300149001861, 0.10138127003291, 0.0660653111133352, 8.24884791431685e-05
        ],
        [
            0.0, 0.0685614617674683, 0.205005740928792, 0.389843660228178, 0.600303036498988,
            0.444399867883395, 0.230297396125311, 0.120576966142488, 0.0866424356698608, 3.08970701760464e-05
        ],
    ],
    [
        [
            1.0, 0.986065536706681, 0.828234316196848, 0.450827282156242, 0.496369936411885,
            0.688447847920526, 0.512450010220699, 0.750844741343919, 0.98541889693922, 0.999952139459265
        ],
        [
            0.0, 0.0332734744511672, 0.180192169617871, 0.519129735806312, 0.490487830198833,
            0.326274912902229, 0.47411799472927, 0.259590648387851, 0.0357893490180342, 1.66362549805352e-05
        ],
        [
            1.0, 0.946078486751189, 0.85613356309358, 0.617104510353248, 0.385423418920577,
            0.403864860137471, 0.366760758547825, 0.0883706234994385, 0.0153686960700334, 6.57579470371429e-05
        ],
        [
            0.0, 0.0345825021247907, 0.13543995113558, 0.412938471925202, 0.627718814729723,
            0.581412379203461, 0.646671236600043, 0.901193986526, 0.963423057859314, 0.999965466478991
        ],
    ],
]

# Compare output to expected result for 10 points
NUM_SAMPLES = 10
SAMPLE_INDICES = [int(i * (EXPECTED_LENGTH - 1) / (NUM_SAMPLES - 1)) for i in range(NUM_SAMPLES)]


def test_example_piecewise_constant_controls(mpi_exec):
    """Test CNOT gate optimization with piecewise constant controls using Python interface."""

    freq01 = [4.80595, 4.8601]
    Jkl = [0.005]
    favg = sum(freq01)/len(freq01)
    rotfreq = favg*np.ones(len(freq01))
    T = 200.0

    unitary = np.identity(4)
    unitary[2, 2] = 0.0
    unitary[3, 3] = 0.0
    unitary[2, 3] = 1.0
    unitary[3, 2] = 1.0

    spline_order = 0
    nsplines = 1000
    gamma_variation = 1.0
    control_enforce_BC = True

    n_osc = 2
    n_levels = 4

    quandary = Quandary(
        freq01=freq01,
        Jkl=Jkl,
        rotfreq=rotfreq,
        T=T,
        targetgate=unitary,
        verbose=False,
        rand_seed=1234,
        spline_order=spline_order,
        nsplines=nsplines,
        gamma_variation=gamma_variation,
        control_enforce_BC=control_enforce_BC
    )

    t, pt, qt, infidelity, energy, population = quandary.optimize(
        mpi_exec=mpi_exec,
        maxcores=1
    )

    assert_results_equal(
        t=t,
        pt=pt,
        qt=qt,
        infidelity=infidelity,
        energy=energy,
        population=population,
        T=T,
        n_osc=n_osc,
        n_levels=n_levels,
        expected_length=EXPECTED_LENGTH,
        expected_infidelity=EXPECTED_INFIDELITY,
        expected_pt=EXPECTED_PT,
        expected_qt=EXPECTED_QT,
        expected_energy=EXPECTED_ENERGY,
        expected_population=EXPECTED_POPULATION,
        sample_indices=SAMPLE_INDICES
    )
