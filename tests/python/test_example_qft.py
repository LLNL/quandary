import os
import pytest
import numpy as np
from quandary import Quandary
from utils import assert_results_equal

# Mark all tests in this file as regression tests
pytestmark = pytest.mark.regression

EXPECTED_LENGTH = 3962
EXPECTED_INFIDELITY = 0.807955384551349

EXPECTED_PT = [
    [
        2.2913650856245997, 9.09644904851116, -17.2909860740465, 3.14875586899579, 7.8469022267136195,
        -9.39852098244228, 4.5281042855394, 14.503322577238201, -9.821651366661971, 1.2879117017857
    ],
    [
        -13.2263008296231, -12.709094348057901, -15.810963798316703, -16.6092338221892, -13.841545820333401,
        -15.2070809621358, -13.865376040249501, -16.2193455601315, -11.9046288731911, -15.325493942116301
    ],
    [
        8.50394099306291, -1.66446338967996, -18.6047215591729, 16.2793069480132, -15.4167928165748,
        -3.06716987564059, 15.4140895082908, -14.3948359344439, -6.5420138844972, 8.27928099844133
    ],
]

EXPECTED_QT = [
    [
        -10.3055805688327, 18.547996566386, 5.99633788520833, -14.7492986560445, 9.38690829174289,
        10.765519868011, -16.3024877831227, 10.0457369314909, 11.435907408410602, -8.659789931837421
    ],
    [
        -6.552844176227279, -14.546229060653001, -12.861344232317801, -14.4594275843637, -14.9531441603284,
        -12.7940664307229, -15.0427619520243, -10.5511177723819, -15.4727302435704, -13.9479688836996
    ],
    [
        11.3131165019958, -19.4150069695826, 9.08858885239631, 5.89552316335488, -13.3352586995519,
        20.585711340520103, -7.00086614252265, -13.1050128906131, 14.8338178835344, -7.261344243272879
    ],
]

EXPECTED_ENERGY = [
    [
        [
            0.0, 0.871740174140779, 0.490091064288099, 0.186335216229364, 0.918292737656804,
            0.478273494645005, 0.11251939507393, 0.879350927167369, 0.426241674349888, 0.199305858262601
        ],
        [
            0.0, 0.868360011032445, 0.490963305110186, 0.194038255724569, 0.916298721789158,
            0.481047465799636, 0.104806663549212, 0.877519131294704, 0.407037999087305, 0.206386987583373
        ],
        [
            0.0, 0.899063477700849, 0.323022026136045, 0.318633068484335, 0.955121439680414,
            0.497262619342675, 0.145864268410915, 0.958173602970953, 0.240135682686225, 0.244528237039347
        ],
        [
            0.0, 0.902179316365234, 0.318345594178397, 0.317004163022575, 0.953988105812139,
            0.494938678281903, 0.143809016498184, 0.960460829452475, 0.265956898465207, 0.247684742825489
        ],
        [
            1.0, 0.14764300905675, 0.510666947446306, 0.815969003998871, 0.0790755210886338,
            0.493391671461912, 0.915056851633572, 0.142616896234222, 0.574789185470027, 0.804076761314804
        ],
        [
            1.0, 0.151071767963378, 0.51247545346474, 0.808589659469236, 0.0779212899125423,
            0.494734774948987, 0.924343214815746, 0.130848538865006, 0.625308236472721, 0.770151457175104
        ],
        [
            1.0, 0.0816503881066301, 0.677252537237086, 0.678498790296523, 0.0496832185589613,
            0.531844530532734, 0.822212880788712, 0.0264601411450504, 0.751644146257915, 0.758435140441681
        ],
        [
            1.0, 0.078291855616928, 0.677183071949085, 0.680931843041985, 0.0496189655503093,
            0.528506764899685, 0.831387709299596, 0.0245699327764925, 0.708886177170138, 0.769430815578887
        ],
    ],
    [
        [
            0.0, 0.977188871268564, 0.0753136468741463, 0.785518165609952, 0.247362238751697,
            0.76930486909517, 0.239006311723343, 0.77277409818515, 0.347981231583044, 0.510833957680721
        ],
        [
            0.0, 0.974429659879698, 0.135185817401484, 0.807626448408114, 0.241176799548327,
            0.767333135072996, 0.376586787556682, 0.682200961517894, 0.345437106620918, 0.32903061813537
        ],
        [
            1.0, 0.0420102449329318, 0.902850597487805, 0.225829286901242, 0.770261717521361,
            0.185748506284338, 0.732179741311534, 0.257131124274444, 0.683330099539097, 0.479630861974819
        ],
        [
            1.0, 0.0364095857597314, 0.917648485515454, 0.169971013985435, 0.736515730426277,
            0.25963938501678, 0.6244576321643, 0.336560874057442, 0.651647048494323, 0.66823099065104
        ],
        [
            0.0, 0.914862552678925, 0.139733744572265, 0.82336832359171, 0.238998197045158,
            0.692479177372269, 0.294083535463614, 0.511231241859868, 0.587026929167996, 0.433871163514347
        ],
        [
            0.0, 0.89999110551123, 0.225023134357934, 0.802416197813807, 0.259123086107682,
            0.61965751949498, 0.493305500733555, 0.361185260609536, 0.619345042550373, 0.337072109119454
        ],
        [
            1.0, 0.077139398614789, 0.816945249444237, 0.229564995560835, 0.757607917751682,
            0.311978931433563, 0.687837074215795, 0.483059072672636, 0.400495012795489, 0.526918937718937
        ],
        [
            1.0, 0.0779685814039652, 0.787299324292812, 0.155705568011388, 0.748954312917913,
            0.393858476192421, 0.552543416841096, 0.595857366994724, 0.364737529323144, 0.714411361133778
        ],
    ],
    [
        [
            0.0, 0.932657043180154, 0.232883300755667, 0.499263175604497, 0.79968930129883,
            0.102079111121508, 0.965715219154716, 0.116459949551682, 0.608244244968234, 0.74496716938059
        ],
        [
            1.0, 0.0713176915860124, 0.741923261556371, 0.511937357716811, 0.1956573619347,
            0.904381403283237, 0.0420906771863643, 0.865130771206598, 0.389968800870834, 0.275807837340239
        ],
        [
            0.0, 0.938367269929136, 0.188086307325669, 0.397558654525151, 0.878665574429945,
            0.035477294772375, 0.982577775588476, 0.0863745341984703, 0.664278630441252, 0.78700594995822
        ],
        [
            1.0, 0.0578831831360669, 0.836313282585613, 0.591534704381165, 0.127699434832128,
            0.957153914724507, 0.0128037158814758, 0.932879023098306, 0.339150694690868, 0.189732920980029
        ],
        [
            0.0, 0.936023410018913, 0.222175343086111, 0.512378498076051, 0.779638804575969,
            0.10806737742764, 0.957417442402706, 0.107276160185518, 0.664606612875009, 0.676172446779003
        ],
        [
            1.0, 0.0697192670746152, 0.754131769563904, 0.490502553267254, 0.222104047704744,
            0.898566676466265, 0.0449883020813609, 0.855134130491501, 0.334282555387071, 0.318455944791095
        ],
        [
            0.0, 0.931248886581956, 0.198395429426979, 0.378098323979276, 0.897130271416472,
            0.0222016935060309, 0.975155329212423, 0.115650833098016, 0.616705049724902, 0.852301481117069
        ],
        [
            1.0, 0.0627832485535767, 0.826091305744087, 0.618726732494471, 0.0994152037367946,
            0.972072528745459, 0.019251538612982, 0.921094598048128, 0.382763411337989, 0.155556249655697
        ],
    ],
]

EXPECTED_POPULATION = [
    [
        [
            1.0, 0.128259825860636, 0.50990893571468, 0.813664783774544, 0.0817072623480035,
            0.521726505360825, 0.887480604932567, 0.12064907283988, 0.573758325658211, 0.800694141745891
        ],
        [
            1.0, 0.131639988968481, 0.509036694891598, 0.80596174427779, 0.0837012782140547,
            0.518952534204549, 0.895193336455928, 0.12248086871159, 0.592962000920103, 0.793613012425036
        ],
        [
            1.0, 0.100936522300607, 0.676977973866748, 0.681366931519649, 0.0448785603245856,
            0.502737380663259, 0.854135731595909, 0.0418263970366679, 0.759864317322149, 0.755471762969313
        ],
        [
            1.0, 0.0978206836357321, 0.681654405823485, 0.682995836979635, 0.0460118941908266,
            0.505061321721877, 0.856190983506639, 0.0395391705534387, 0.734043101541823, 0.75231525718272
        ],
        [
            0.0, 0.852356990944198, 0.489333052555531, 0.184030996003463, 0.920924478914508,
            0.50660832854214, 0.0849431483716364, 0.857383103772003, 0.425210814537241, 0.195923238693364
        ],
        [
            0.0, 0.848928232038026, 0.487524546537911, 0.191410340534224, 0.922078710091827,
            0.505265225056285, 0.0756567851902375, 0.86915146114167, 0.374691763534784, 0.229848542832694
        ],
        [
            0.0, 0.918349611894318, 0.32274746276484, 0.321501209705818, 0.950316781444117,
            0.468155469471242, 0.177787119216138, 0.973539858860926, 0.248355853749125, 0.241564859566025
        ],
        [
            0.0, 0.921708144384436, 0.322816928053612, 0.319068156961615, 0.950381034454222,
            0.471493235105835, 0.16861229070683, 0.975430067230684, 0.291113822837825, 0.230569184429451
        ],
    ],
    [
        [
            1.0, 0.0228111287328508, 0.924686353128632, 0.214481834393956, 0.752637761253111,
            0.230695130910659, 0.760993688283154, 0.2272259018221, 0.652018768425055, 0.489166042327772
        ],
        [
            1.0, 0.0255703401212273, 0.864814182600301, 0.192373551594245, 0.758823200454885,
            0.232666864931189, 0.623413212448459, 0.3177990384884, 0.65456289338649, 0.67096938187304
        ],
        [
            0.0, 0.957989755068525, 0.0971494025149874, 0.774170713102742, 0.229738282483638,
            0.814251493721596, 0.267820258695289, 0.742868875733177, 0.316669900469277, 0.52036913803384
        ],
        [
            0.0, 0.963590414241234, 0.082351514486428, 0.830028986016775, 0.263484269576689,
            0.740360614987001, 0.375542367840523, 0.663439125948471, 0.348352951512707, 0.331769009357169
        ],
        [
            1.0, 0.0851374473220236, 0.860266255429572, 0.176631676410624, 0.761001802957984,
            0.307520822631783, 0.705916464541595, 0.488768758146357, 0.412973070839272, 0.56612883649382
        ],
        [
            1.0, 0.100008894490174, 0.774976865644717, 0.197583802189653, 0.740876913896688,
            0.380342480510292, 0.506694499272428, 0.638814739397139, 0.380654957457132, 0.662927890888343
        ],
        [
            0.0, 0.922860601386159, 0.183054750557688, 0.770435004441506, 0.242392082251396,
            0.688021068570413, 0.312162925789055, 0.51694092733334, 0.599504987211551, 0.473081062288769
        ],
        [
            0.0, 0.922031418597399, 0.212700675709885, 0.844294431992213, 0.251045687086618,
            0.606141523813099, 0.44745658316533, 0.404142633012452, 0.635262470684819, 0.28558863887456
        ],
    ],
    [
        [
            1.0, 0.0673429568212604, 0.767116699247112, 0.500736824399411, 0.200310698705978,
            0.897920888884322, 0.0342847808517807, 0.883540050455567, 0.391755755039865, 0.255032830627902
        ],
        [
            0.0, 0.928682308414913, 0.258076738445413, 0.488062642285548, 0.804342638068513,
            0.0956185967209478, 0.957909322818776, 0.134869228799696, 0.610031199136574, 0.72419216266817
        ],
        [
            1.0, 0.0616327300723214, 0.811913692677124, 0.602441345478833, 0.121334425575055,
            0.964522705233559, 0.0174222244183482, 0.91362546580915, 0.335721369567122, 0.21299405005044
        ],
        [
            0.0, 0.942116816864899, 0.163686717416269, 0.408465295621045, 0.872300565170837,
            0.0428460852792731, 0.987196284123347, 0.0671209769076069, 0.660849305316163, 0.81026707902818
        ],
        [
            1.0, 0.0639765899820351, 0.777824656915726, 0.487621501926283, 0.220361195427173,
            0.891932622576412, 0.0425825576025024, 0.892723839820707, 0.335393387132259, 0.323827553229165
        ],
        [
            0.0, 0.930280732926789, 0.245868230438746, 0.509497446736207, 0.777895952299626,
            0.101433323539008, 0.955011697924623, 0.144865869515174, 0.665717444620434, 0.681544055216702
        ],
        [
            1.0, 0.0687511134189918, 0.801604570574946, 0.621901676023065, 0.102869728586607,
            0.977798306497945, 0.0248446707924268, 0.88434916690796, 0.383294950282138, 0.147698518890636
        ],
        [
            0.0, 0.937216751447787, 0.17390869425861, 0.38127326750913, 0.900584796267736,
            0.0279274712600607, 0.980748461393444, 0.0789054019590485, 0.617236588669974, 0.844443750352641
        ],
    ],
]

# Compare output to expected result for 10 points
NUM_SAMPLES = 10
SAMPLE_INDICES = [int(i * (EXPECTED_LENGTH - 1) / (NUM_SAMPLES - 1)) for i in range(NUM_SAMPLES)]


def get_QFT_gate(dim):
    """Generate QFT gate."""
    gate_Hd = np.zeros((dim, dim), dtype=complex)
    om_d = np.exp(1j*2*np.pi/dim)

    for j in range(dim):
        for k in range(dim):
            gate_Hd[j, k] = om_d**(j*k) / np.sqrt(dim)

    return gate_Hd


def test_example_qft(mpi_exec, tmp_path, request):
    """Test 3-qubit QFT gate optimization using Python interface."""
    datadir_path = os.path.join(tmp_path, request.node.name)

    # Parameters for 3-qubit case
    nqubits = 3
    freq01_all = [5.18, 5.12, 5.06, 5.0, 4.94]
    Jkl_coupling = 5e-3

    # Set up frequency vector
    freq01 = []
    Ne = []
    Ng = []
    for i in range(nqubits):
        freq01.append(freq01_all[len(freq01_all)-i-1])
        Ne.append(2)
        Ng.append(0)

    # Set up qubit CHAIN coupling
    Jkl = []
    for i in range(len(Ne)):
        for j in range(i+1, len(Ne)):
            if j == i+1:
                val = Jkl_coupling
            else:
                val = 0.0
            Jkl.append(val)

    T = 100
    favg = sum(freq01)/len(freq01)
    rotfreq = favg*np.ones(len(freq01))
    unitary = get_QFT_gate(np.prod(Ne))

    Pmin = 150*2
    spline_knot_spacing = 3.0
    maxctrl_MHz = 25.0
    cw_amp_thres = 5e-2
    cw_prox_thres = 1e-3
    gamma_energy = 1e-4
    gamma_tik0 = 1e-3
    gamma_dpdm = 0.0

    n_osc = 3
    n_levels = 8

    quandary = Quandary(
        Ne=Ne,
        Ng=Ng,
        freq01=freq01,
        Jkl=Jkl,
        rotfreq=rotfreq,
        T=T,
        Pmin=Pmin,
        spline_knot_spacing=spline_knot_spacing,
        targetgate=unitary,
        verbose=False,
        rand_seed=1234,
        maxctrl_MHz=maxctrl_MHz,
        cw_amp_thres=cw_amp_thres,
        cw_prox_thres=cw_prox_thres,
        gamma_energy=gamma_energy,
        gamma_tik0=gamma_tik0,
        gamma_dpdm=gamma_dpdm,
        maxiter=10,
    )

    t, pt, qt, infidelity, energy, population = quandary.optimize(
        mpi_exec=mpi_exec,
        maxcores=4,
        datadir=datadir_path,
    )

    assert_results_equal(
        t=t,
        pt=pt,
        qt=qt,
        infidelity=infidelity,
        energy=energy,
        population=population,
        T=T,
        n_osc=n_osc,
        n_levels=n_levels,
        expected_length=EXPECTED_LENGTH,
        expected_infidelity=EXPECTED_INFIDELITY,
        expected_pt=EXPECTED_PT,
        expected_qt=EXPECTED_QT,
        expected_energy=EXPECTED_ENERGY,
        expected_population=EXPECTED_POPULATION,
        sample_indices=SAMPLE_INDICES
    )
