import os
import pytest
import numpy as np
from quandary import Quandary
from utils import assert_results_equal

# Mark all tests in this file as regression tests
pytestmark = pytest.mark.regression

EXPECTED_LENGTH = 2770
EXPECTED_INFIDELITY = 9.67097896760194e-05

EXPECTED_PT = [
    [
        0.599034888469003, -10.968081982073999, 10.14236927141, 0.496271971161855, -14.8514105719963,
        -11.3322163850956, 16.9432995218654, -6.05304529127491, 12.0226355784784, -0.641103780993672
    ],
    [
        2.48936017685105, -11.2829788700018, -15.755782714853801, -1.69673183942007, 10.9397063530761,
        -18.4617758434191, 18.1364064558067, 11.902151691561299, 1.80322805292038, -0.763753212634492
    ],
]

EXPECTED_QT = [
    [
        -1.3752677251873802, -5.5464862618018, 3.02923318776624, 13.7730836966518, -1.7585200127837,
        -9.011639916323329, -1.02548250949667, -17.9437297458633, -8.87260196321638, -2.93635959571215
    ],
    [
        3.4729999145959702, -9.27721643120156, 4.4305118894594395, 9.31615718399924, 5.30459674901088,
        -9.22190274347588, 2.59404705348415, -9.65359045655237, -11.0388548375149, -5.45347255997612
    ],
]

EXPECTED_ENERGY = [
    [
        [
            0.0, 0.742167645308173, 0.845876123438329, 0.876822609250943, 0.796182302264054,
            0.887353619145017, 0.260229247427617, 0.521386717096158, 0.561593586081704, 3.12615266865929e-05
        ],
        [
            0.0, 0.747964174490869, 0.81308548430137, 0.844293448814631, 0.487202832021772,
            0.537027480466349, 0.682308807793044, 0.462529297492794, 0.424555046737099, 0.99992128057069
        ],
        [
            1.0, 0.297596002648272, 0.137778784261989, 0.202672034405316, 0.147534884119167,
            0.382971375153893, 0.651028961021465, 0.290564541017844, 0.466176092802048, 7.51845953833445e-05
        ],
        [
            1.0, 0.212272177599911, 0.203259607969132, 0.0762119075973001, 0.569079981693835,
            0.192647525133809, 0.406432983229683, 0.725519445925169, 0.547675275958967, 0.99997227346397
        ],
    ],
    [
        [
            0.0, 0.637458571928054, 0.823214144624233, 0.872362860193146, 0.679904496367965,
            0.653572678063292, 0.256647736263631, 0.111186998901804, 0.0825959025957188, 1.50545826445065e-05
        ],
        [
            1.0, 0.366269959795093, 0.166735351026335, 0.219583342381534, 0.193630403614705,
            0.549842705887935, 0.450534076598297, 0.227640166947384, 0.148479698500191, 0.000115585877250997
        ],
        [
            0.0, 0.758135709540351, 0.866661271296851, 0.880683596677818, 0.601257953396355,
            0.716614252087069, 0.455517321681113, 0.734916740037334, 0.894595345819472, 0.99993700568465
        ],
        [
            1.0, 0.238135758957608, 0.143389232990416, 0.0273702009562704, 0.525207146619372,
            0.0799703639870128, 0.837300865403608, 0.926256094308564, 0.87432905329638, 0.999932354015059
        ],
    ],
]

EXPECTED_POPULATION = [
    [
        [
            1.0, 0.257832354742856, 0.154123876614857, 0.123177390836603, 0.203817697828531,
            0.112646380949646, 0.739770752668589, 0.478613283001325, 0.438406414023916, 0.999968738581146
        ],
        [
            1.0, 0.252035825513849, 0.186914515704484, 0.155706551197306, 0.512797167991688,
            0.462972519549354, 0.317691192226717, 0.537470702530461, 0.575444953291613, 7.87194605389381e-05
        ],
        [
            0.0, 0.702403997357403, 0.862221215745015, 0.797327965602158, 0.852465115890104,
            0.617028624857648, 0.348971038993238, 0.709435459000186, 0.533823907230384, 0.999924815438965
        ],
        [
            0.0, 0.787727822455274, 0.796740392088216, 0.923788092476431, 0.430920018382434,
            0.807352474945377, 0.593567016851729, 0.274480554157485, 0.452324724162786, 2.77266603992627e-05
        ],
    ],
    [
        [
            1.0, 0.362541428122975, 0.176785855428953, 0.1276371398944, 0.320095503724619,
            0.346427322031371, 0.743352263832575, 0.888813001195679, 0.917404097509901, 0.999984945525188
        ],
        [
            0.0, 0.633730040209626, 0.833264648979519, 0.780416657630403, 0.806369596398755,
            0.450157294127768, 0.549465923421463, 0.772359833075872, 0.851520301528521, 0.999884414153978
        ],
        [
            1.0, 0.241864290465325, 0.133338728710153, 0.119316403329656, 0.398742046612916,
            0.283385747924472, 0.544482678333589, 0.265083259980697, 0.105404654212961, 6.29943496979323e-05
        ],
        [
            0.0, 0.761864241097577, 0.856610767066932, 0.972629799117461, 0.474792853456897,
            0.920029636092174, 0.162699134677804, 0.0737439057740906, 0.125670946825373, 6.76461093106855e-05
        ],
    ],
]

# Compare output to expected result for 10 points
NUM_SAMPLES = 10
SAMPLE_INDICES = [int(i * (EXPECTED_LENGTH - 1) / (NUM_SAMPLES - 1)) for i in range(NUM_SAMPLES)]


def test_example_swap12(mpi_exec, tmp_path, request):
    """Test SWAP 1-2 gate optimization using Python interface."""
    datadir_path = os.path.join(tmp_path, request.node.name)

    freq01 = [5.12, 5.06]
    Jkl = [5.0e-3]
    favg = sum(freq01)/len(freq01)
    rotfreq = favg*np.ones(len(freq01))
    T = 200.0
    maxctrl_MHz = 30.0*np.ones(len(freq01))
    unitary = np.identity(4)
    unitary[1, 1] = 0.0
    unitary[1, 2] = 1.0
    unitary[2, 1] = 1.0
    unitary[2, 2] = 0.0
    n_osc = 2
    n_levels = 4

    quandary = Quandary(
        freq01=freq01,
        Jkl=Jkl,
        rotfreq=rotfreq,
        T=T,
        maxctrl_MHz=maxctrl_MHz,
        targetgate=unitary,
        verbose=False,
        rand_seed=1234,
    )

    t, pt, qt, infidelity, energy, population = quandary.optimize(
        mpi_exec=mpi_exec,
        maxcores=4,
        datadir=datadir_path,
    )

    assert_results_equal(
        t=t,
        pt=pt,
        qt=qt,
        infidelity=infidelity,
        energy=energy,
        population=population,
        T=T,
        n_osc=n_osc,
        n_levels=n_levels,
        expected_length=EXPECTED_LENGTH,
        expected_infidelity=EXPECTED_INFIDELITY,
        expected_pt=EXPECTED_PT,
        expected_qt=EXPECTED_QT,
        expected_energy=EXPECTED_ENERGY,
        expected_population=EXPECTED_POPULATION,
        sample_indices=SAMPLE_INDICES
    )
