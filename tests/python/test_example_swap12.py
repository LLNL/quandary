import pytest
import numpy as np
from quandary import Quandary
from utils import assert_results_equal

# Mark all tests in this file as regression tests
pytestmark = pytest.mark.regression

EXPECTED_LENGTH = 2770
EXPECTED_INFIDELITY = 7.825770499303442e-05

EXPECTED_PT = [
    [
        1.8184215029697302, 6.53541488985085, -12.8815729540948, 13.377779957533601, 15.2559573747476,
        -8.55501991773305, -11.571287232539401, 14.5042812158254, -15.2528144059597, -3.12330522923919
    ],
    [
        -2.87395494164515, 16.170015973460497, 11.9340520593027, 12.4971142034791, -13.5854201479712,
        7.59926941274165, -4.00248319501313, -12.8298360004956, -6.616155043728059, 1.7176979043401601
    ],
]

EXPECTED_QT = [
    [
        3.01935945129119, 16.9528419819601, -4.97870306003347, -6.96804772378882, -0.690015284496415,
        18.0510636076456, -15.4461172849659, 2.94473029913097, -4.26291478812709, 5.15980230386097
    ],
    [
        -6.72607543122026, 8.02402525815179, -14.674541268055801, -12.9299891301557, 12.4372973005706,
        10.031606552642499, -17.2180727670311, -10.4295835579693, -4.794657547857811, 6.95039468450853
    ],
]

EXPECTED_ENERGY = [
    [
        [
            0.0, 0.47592735741237, 0.920916877121964, 0.806725800976249, 0.655347266057245,
            0.40956010822443, 0.523495640405955, 0.389958416870123, 0.894309878756772, 2.78351042400667e-05
        ],
        [
            0.0, 0.506436069839158, 0.894041487982348, 0.482825459874139, 0.263276647075983,
            0.706421192747589, 0.326892966495981, 0.546600128673876, 0.13730502998382, 0.999928014745447
        ],
        [
            1.0, 0.517968156465863, 0.0990805037166172, 0.323988697368065, 0.517432001627619,
            0.162284449342756, 0.321486318542869, 0.492744199081024, 0.806922263339182, 7.61332704578777e-05
        ],
        [
            1.0, 0.499668416053135, 0.0859611313258037, 0.386460041957824, 0.563944085315957,
            0.721734249708354, 0.82812507503546, 0.570697256338126, 0.161462827349231, 0.999968016951936
        ],
    ],
    [
        [
            0.0, 0.746465361502474, 0.446030321847237, 0.751926392244149, 0.438374046543845,
            0.74788628530837, 0.436255115167154, 0.770339060727562, 0.624611223052237, 2.6314964006988e-05
        ],
        [
            1.0, 0.248921057424824, 0.602804594052578, 0.156112931294798, 0.592388881415718,
            0.565265558947553, 0.492594960169373, 0.912502253042697, 0.677377691676097, 7.8641614022487e-05
        ],
        [
            0.0, 0.69109059043582, 0.612946285346014, 0.774327542815432, 0.102443880083346,
            0.188841270175233, 0.716258624483362, 0.282332897067584, 0.397788656312723, 0.999929501726309
        ],
        [
            1.0, 0.313522990987136, 0.338218798604214, 0.317633134502716, 0.866793191462009,
            0.498006885137639, 0.354891300964239, 0.0348257898399821, 0.300222429802531, 0.999965541769708
        ],
    ],
]

EXPECTED_POPULATION = [
    [
        [
            1.0, 0.524072642589295, 0.0790831228826006, 0.193274199031723, 0.344652733956227,
            0.590439891793979, 0.476504359618558, 0.610041583159233, 0.105690121275478, 0.999972164930443
        ],
        [
            1.0, 0.493563930162257, 0.105958512020345, 0.517174540132416, 0.736723352935244,
            0.2935788072667, 0.67310703352522, 0.45339987135301, 0.862694970044658, 7.1985285512568e-05
        ],
        [
            0.0, 0.482031843535495, 0.900919496286575, 0.676011302636772, 0.48256799838042,
            0.837715550669844, 0.678513681476111, 0.507255800952662, 0.193077736696033, 0.999923866768033
        ],
        [
            0.0, 0.500331583949654, 0.914038868680122, 0.613539958052361, 0.436055914699638,
            0.278265750311728, 0.171874924988557, 0.42930274369637, 0.838537172687105, 3.198308739064e-05
        ],
    ],
    [
        [
            1.0, 0.253534638499192, 0.553969678157327, 0.248073607763823, 0.561625953469628,
            0.25211371471004, 0.563744884857359, 0.229660939301793, 0.375388776980013, 0.999973685070676
        ],
        [
            0.0, 0.751078942576592, 0.397195405950115, 0.843887068711757, 0.407611118595508,
            0.434734441066736, 0.507405039851828, 0.0874977469841897, 0.322622308352381, 0.999921358416937
        ],
        [
            1.0, 0.308909409565538, 0.387053714657178, 0.225672457189406, 0.897556119924694,
            0.811158729837367, 0.283741375535618, 0.717667102966101, 0.602211343722492, 7.0498312181619e-05
        ],
        [
            0.0, 0.686477009015653, 0.661781201401711, 0.682366865507469, 0.133206808553586,
            0.501993114882443, 0.645108699059778, 0.965174210194513, 0.699777570233805, 3.44582696187683e-05
        ],
    ],
]

# Compare output to expected result for 10 points
NUM_SAMPLES = 10
SAMPLE_INDICES = [int(i * (EXPECTED_LENGTH - 1) / (NUM_SAMPLES - 1)) for i in range(NUM_SAMPLES)]


def test_example_swap12(mpi_exec):
    """Test SWAP 1-2 gate optimization using Python interface."""

    freq01 = [5.12, 5.06]
    Jkl = [5.0e-3]
    favg = sum(freq01)/len(freq01)
    rotfreq = favg*np.ones(len(freq01))
    T = 200.0
    maxctrl_MHz = 30.0*np.ones(len(freq01))
    unitary = np.identity(4)
    unitary[1, 1] = 0.0
    unitary[1, 2] = 1.0
    unitary[2, 1] = 1.0
    unitary[2, 2] = 0.0
    n_osc = 2
    n_levels = 4

    quandary = Quandary(
        freq01=freq01,
        Jkl=Jkl,
        rotfreq=rotfreq,
        T=T,
        maxctrl_MHz=maxctrl_MHz,
        targetgate=unitary,
        verbose=False,
        rand_seed=1234,
    )

    t, pt, qt, infidelity, energy, population = quandary.optimize(
        mpi_exec=mpi_exec,
        maxcores=4
    )

    assert_results_equal(
        t=t,
        pt=pt,
        qt=qt,
        infidelity=infidelity,
        energy=energy,
        population=population,
        T=T,
        n_osc=n_osc,
        n_levels=n_levels,
        expected_length=EXPECTED_LENGTH,
        expected_infidelity=EXPECTED_INFIDELITY,
        expected_pt=EXPECTED_PT,
        expected_qt=EXPECTED_QT,
        expected_energy=EXPECTED_ENERGY,
        expected_population=EXPECTED_POPULATION,
        sample_indices=SAMPLE_INDICES
    )
