##################
# Testcase 
##################
// Number of levels per subsystem
nlevels = 2
// Number of time steps
ntime = 100
// Time step size (ns)
dt = 0.1
// Fundamental transition frequencies (|0> to |1> transition) for each oscillator ("\omega", MHz, will be multiplied by 2*PI)
transfreq = 5.10595
// Self-kerr frequencies for each oscillator ("\xi_k", multiplying a_k^d a_k^d a_k a_k,  MHz, will be multiplied by 2*PI)
selfkerr = 0.1198
// Cross-kerr coupling frequencies for each oscillator coupling k<->l ("\xi_kl", multiplying a_k^d a_k a_l^d a_l, MHz, will be multiplied by 2*PI)
// Format: x = [x_01, x_02,...,x_12, x_13....] -> number of elements here should be (noscillators-1)*noscillators/2 !
crosskerr = 0.0
// Jaynes-Cummings coupling frequencies for each oscillator coupling k<->l ("J_kl", multiplying a_k^d a_l + a_k a_l^d, MHz, will be multiplied by 2*PI)
// Format Jkl = [J_01, J_02, ..., J12, J13, ...] -> number of elements are (noscillators-1)*noscillators/2
Jkl = 0.0
// Rotation wave approximation frequencies for each oscillator ("\omega_rot", MHz, will be multiplied by 2*PI)
rotfreq = 3.2
// Lindblad collapse type: "none", "decay", "dephase" or "both"
collapse_type = both
// Time of decay collapse operation (T1) per oscillator (gamma_1 = 1/T_1). 
decay_time = 38000.0
// Time of dephase collapse operation (T2) per oscillator (gamma_2 = 1/T_2). 
dephase_time = 19000.0
// Specify the initial conditions: 
// "file, /path/to/file"  - read one specific initial condition from file (Format: one column of length 2N^2 containing vectorized density matrix, first real part, then imaginary part), 
// "pure, <list, of, unit, vecs, per, oscillator>" - init with kronecker product of pure vectors, e.g. "pure, 1,0" sets the initial state |1><1| \otimes |0><0|
// "diagonal, <list, of, oscillator, IDs>" - all unit vectors that correspond to the diagonal of the (full or reduced) density matrix for the subsystem defined by the list of oscillator IDs.
// "basis, <list, of, oscillator, IDs>" - basis for the (full or reduced) density matrix for the subsystem defined by the list of oscillator IDs.
initialcondition = basis, 0
#initialcondition = diagonal, 0
#initialcondition = file, ./initcond/alice_sumbasis.dat
#initialcondition = pure, 1,0

##################
# Braid options 
##################
// Maximum  number of time grid levels (maxlevels = 1 runs sequential forward simulation, e.g. no braid)
braid_maxlevels = 1
// Coarsening factor
braid_cfactor = 5
// Level of braid screen output. 0 - no output, 1 - convergence history, higher numbers: compare with xbraid doc
braid_printlevel = 1
// Maximum number of braid iterations per optimization cycle
braid_maxiter = 20
// Absolute stopping tolerance
braid_abstol = 1e-5
// Relative stopping tolerance
braid_reltol = 1e-4
// Turn on/off full multigrid cycle. This is costly, but convergence typically improves.
braid_fmg     = true
// Skip computation on first downcycle
braid_skip    = false
// Decide how often the state will be written to a file. 0 - never, 1 - once after each braid run // TODO: only after optimization finishes
braid_accesslevel = 1

#######################
# Optimization options 
#######################
// Number of spline basis functions per oscillator control
nspline = 150
// Carrier wave frequencies. One line per oscillator 0..Q-1. (GHz, will be multiplied by 2*PI)
carrier_frequency0 = 0.0, -0.2198, -0.1
// Specify the optimization target state \rho(T):
// "gate, <type>" where <type> can be "cnot", "cqnot", "swap", swap0q", "xgate", "ygate", "zgate" or "hadamard": the target state is the gate-transformed initial conditions. 
// "pure, <m>" for preparing the m-th pure state
optim_target = gate, hadamard
// Specify the objective function
// "Jfrobenius", "Jtrace", "Jmeasure"
optim_objective = Jfrobenius
// Weights per oscillator for computing weighted sum of expected energy levels in objective function 
optim_weights = 1.0
// Initial control parameters: "constant" initializes with constant amplitudes, "random" initializes with random amplitudes (fixed seed), "random_seed" same but using a random seed, "/path/to/file/" reads initial paramters from file
optim_init = base/params.dat
// Initial control parameter amplitudes for each oscillator, if constant initialization. If random initialization, these amplitudes are maximum bounds for the random number generator
optim_init_ampl = 0.005
// Specify bounds for the absolute control function amplitudes per oscillator (rad/us)
optim_bounds = 0.05
// Optimization stopping tolerance (absolute: ||G|| < atol )
optim_atol     = 1e-4
// Optimization stopping tolerance (relative: ||G||/||G0|| < rtol )
optim_rtol     = 1e-5
// Maximum number of optimization iterations
optim_maxiter = 100
// Coefficient of Tikhonov regularization for the design variables (gamma/2 || design ||^2)
optim_regul   = 0.00001
// Coefficient for adding integral penalty term (gamma \int_0^T w(t) J(rho(t)) dt )
optim_penalty = 0.0
// integral penalty parameter inside w(t)
optim_penalty_param = 0.5

######################
# Output and runtypes
######################
// Directory for output files
datadir = ./data_out
// Specify the desired output for each oscillator, one line per oscillator. Format: list of either of the following options: 
//"expectedEnergy" - expected energy level for each time step, 
//"population" - population (diagonals of the reduced density matrix) at each time step
//"fullstate" - density matrix of the full system (can appear in any of the lines). WARNING: might result in HUGE output files. Use with care.
#output0 = population, expectedEnergy, fullstate
output0 = population, expectedEnergy, fullstate
output1 = population, expectedEnergy, fullstate
// Output frequency in the time domain: write output every <num> time-step (num=1 writes every time step)
output_frequency = 100
// Frequency of writing output during optimization: write output and optim history every <num> iterations
optim_monitor_frequency = 100
// Runtype options: "primal" - forward simulation only, "adjoint" - forward and backward, or "optimization" - run optimization
runtype = gradient
// Use matrix free solver, instead of sparse matrix implementation. Currently implemented for 2 oscillators only.
usematfree = false
// Use Petsc's timestepper, or use home-brewed time stepper (preferred, implicit midpoint rule)
usepetscts = false
// Switch for monitoring Petc's timestepper
monitor = false
// Choose linear solver, eighter 'gmres' for using Petsc's GMRES solver (preferred), or 'neumann' for using Neumann series iterations to solve the linear system
linearsolver_type = gmres
// Set maximum number of iterations for the linear solver
linearsolver_maxiter = 20

#################################################
# Parallel execution (experimental): 
# Always: np_braid * np_init * np_petsc = size(MPI_COMM_WORLD)
# And np_init matches the chosen option in 'initialcondition'
# parallel petsc works with usematfree=false only
#################################################
// Number of processes for distrubuting the initial conditions (np_init) and xbraid (np_braid). The remaining processors (=size(MPI_COMM_WORLD)/(npinit*npbraid) will be used to parallelize petsc. 
np_init = 1
np_braid = 1
