##################
# Testcase 
##################
// Number of levels per subsystem
nlevels = 4
// Number of essential levels per subsystem (Default: Same as number of levels, comment out if not used). 
nessential = 3
// Number of time steps
ntime = 20000
// Time step size (ns)
dt = 0.005
// Fundamental transition frequencies (|0> to |1> transition) for each oscillator ("\omega_k", multiplying a_k^d a_k,  GHz, will be multiplied by 2*PI)
transfreq = 4.10595
// Self-kerr frequencies for each oscillator ("\xi_k", multiplying a_k^d a_k^d a_k a_k,  GHz, will be multiplied by 2*PI)
selfkerr = 0.2198
// Cross-kerr coupling frequencies for each oscillator coupling k<->l ("\xi_kl", multiplying a_k^d a_k a_l^d a_l, GHz, will be multiplied by 2*PI)
// Format: x = [x_01, x_02,...,x_12, x_13....] -> number of elements here should be (noscillators-1)*noscillators/2 !
crosskerr = 0.0
// Dipole-dipole coupling frequencies for each oscillator coupling k<->l ("J_kl", multiplying a_k^d a_l + a_k a_l^d, GHz, will be multiplied by 2*PI)
// Format Jkl = [J_01, J_02, ..., J12, J13, ...] -> number of elements are (noscillators-1)*noscillators/2
Jkl = 0.0
// Rotational wave approximation frequencies for each subsystem ("\omega_rot", GHz, will be multiplied by 2*PI)
// Note: The rotation of a target *gate* can be given separately with the "gate_rot_freq" option, see below.
rotfreq = 4.10595
// Decide which Lindblad collapse operators are taken into account: "none", "decay", "dephase" or "both"
// Note that choosing 'none' here will solve Schroedinger's equation for the state vector, vs. all other choices will solve Lindblad's master equation for the density matrix!
collapse_type = none
// Time of decay collapse operation (T1) per oscillator (gamma_1 = 1/T_1) (only active if 'collapse_type' is NOT 'none')
// Note that setting collapse times to 0.0 for decay and/or dephasing will omit the evaluation of the corresponding terms inside the the Lindbladian operator. Therefore, choosing 0.0 here together with any other choice than "none" for the collapse_type, will still solve Lindblads equation for the density matrix (!). If you want to use Schroedingers solver for the state vector (!), choose 'collapse_type=none'.
#decay_time = 56000.0
// Time of dephase collapse operation (T2) per oscillator (gamma_2 = 1/T_2) (only active if 'collapse_type' is NOT 'none')
#dephase_time = 28000.0
// Specify the initial conditions: 
// "file, /path/to/file" - read one specific initial condition from file (Format: one column containing the state vector or the vectorized density matrix, first all real elements, then all imaginary elements, length of the file must be 2N (for state vector) or 2N^2 (for vectorized density matrix))
// "pure, <list, of, unit, vecs, per, oscillator>" - init with kronecker product of pure vectors, e.g. "pure, 1,0" sets the initial state |1> \otimes |0> 
// "ensemble, <list, of, oscillator, IDs>" - ensemble state for the subsystems indicated by the list of oscillators, ground state for the other oscillators
// "diagonal, <list, of, oscillator, IDs>" - all unit vectors that correspond to the diagonal of the (full or reduced) density matrix for the subsystem defined by the list of oscillator IDs.
// "basis, <list, of, oscillator, IDs>" - basis for the (full or reduced) density matrix for the subsystem defined by the list of oscillator IDs.
// "3states"  - uses the three specific initial states from C. Koch paper for gate optimization ("Optimal control theory for a unitary operation under dissipative evolution", New Journal of Physics, 2014)
// "Nplus1"   - N+1 initial conditions from C. Kochs paper for gate optimization ("Optimal control theory for a unitary operation under dissipative evolution", New Journal of Physics, 2014)
initialcondition = basis
#initialcondition = diagonal, 0
#initialcondition = file, /path/to/file.dat
#initialcondition = pure, 1, 0
#initialcondition = 3states
#initialcondition = Nplus1
#initialcondition = 3states
// Apply a pi-pulse to oscillator <oscilID> from <tstart> to <tstop> using a control strength of <amp> rad/us. This ignores the codes control parameters inside [tstart,tstop], and instead applies the constant control amplitude |p+iq|=<amp> to oscillator <oscilID>, and zero control for all other oscillators.
// Format per pipulse: 4 values: <oscilID (int)>, <tstart (double)>, <tstop (double)>, <amp(double)>
// For more than one pipulse, just put them behind each other. I.e. number of elements here should be integer multiple of 4. For example either of the following lines:
#apply_pipulse = 0, 0.5, 0.604, 15.10381

#######################
# Optimization options 
#######################
control_segments0 = spline, 30
control_initialization0 = constant, 0.0015
control_bounds0 = 0.008
// Enforce control boundary conditions? (start and end at zero? Default: true)
control_enforceBC=true
// Carrier wave frequencies. One line per oscillator 0..Q-1. (GHz, will be multiplied by 2*PI)
carrier_frequency0 = 0.0, -0.2198
// Specify the optimization target state \rho(T):
// "gate, <type>" where <type> can be "cnot", "cqnot", "swap", "swap0q", "xgate", "ygate", "zgate", "hadamard", "file, /path/to/file": the target state is the gate-transformed initial conditions. If the gate is read from file, the file format is the vectorized target gate, first all real parts, then all imaginary parts (2*Ness*Ness rows, one value per row). 
// "pure, <m1>, <m2>, ... , <mQ>"  - prepare the pure state |m1 m2 m3 ... mQ>. Note: Each oscillators pure target state is separated by commas!
// "file, /path/to/file" - read a target state from file (Format: one column containing the state vector or the vectorized density matrix, first all real elements, then all imaginary elements, length of the file must be 2N (for state vector) or 2N^2 (for vectorized density matrix))
optim_target = gate, file, ./gate_swap02.dat
// Specify the objective function
// "Jfrobenius", "Jtrace", or "Jmeasure"
optim_objective = Jtrace
// If optimization target is a gate, specify the gate rotation frequencies (GHz, will be multiplied by 2*PI). By default, those are the rotational frequencies of the system, so commenting out this line ensures that gate rotation matches the rotational frame frequencies. Otherwise, they can be set differently here, e.g. 0.0, 0.0,... for Lab frame gate. 
// Format: one number per oscillator. If less numbers are given, the *last* one will be used to all remaining oscillators.
gate_rot_freq = 0.0
// Weights for summing over initial conditions in objective function (beta_i). Format: list of values separated by comma. If less values than initial conditions are given, the *last* value will be used for the remaining initial conditions. 
optim_weights = 1.0
// Optimization stopping tolerance based on gradient norm (absolute: ||G|| < atol )
optim_atol     = 1e-7
// Optimization stopping tolerance based on gradient norm (relative: ||G||/||G0|| < rtol )
optim_rtol     = 1e-8
// Optimization stopping criterion based on final time cost (absolute: J(T) < ftol )
optim_ftol     = 1e-6
// Optimization stopping criterion based on infidelity (absolute: 1-Favg < inftol)
optim_inftol     = 1e-4
// Maximum number of optimization iterations
optim_maxiter = 100
// Coefficient (gamma_1) of Tikhonov regularization for the design variables (gamma_1/2 || design ||^2)
optim_regul   = 0.001
// Coefficient (gamma_2) for adding first integral penalty term (gamma_1 \int_0^T P(rho(t) dt )
optim_penalty = 0.1
// integral penalty parameter inside the weight in P(rho(t)) (gaussian variance a)
optim_penalty_param = 0.0
// Coefficient (gamma_3) for penalizing the integral of the second derivative of state populations (gamma_3 \int_0^T d^2/dt^2(Pop(rho)) dt )
optim_penalty_dpdm = 0.0
// Coefficient (gamma_4) for penalizing the control pulse energy integral (gamma_4 \int_0^T p^2 + q^2 dt )
optim_penalty_energy= 0.0
// Switch to use Tikhonov regularization with ||alpha - alpha_0||^2 instead of ||alpha||^2
optim_regul_tik0=false

######################
# Output and runtypes
######################
// Directory for output files
datadir = ./data_out
// Specify the desired output for each oscillator, one line per oscillator. Format: list of either of the following options: 
//"expectedEnergy" - time evolution of the expected energy level for this oscillator (expected energy of the reduced density matrix) 
//"expectedEnergyComposite" - time evolution of expected energy level of the full-dimensional composite system
//"population" - time evolution of the energy level populations (probabilities) for this oscillator (diagonals of the reduced density matrix) 
//"populationComposite" - time evolution of the energy level population (probabilities) for the full-dimensional composite system
//"fullstate" - time-evolution of the full state of the composite system (full density matrix, or state vector) (note: 'fullstate' can appear in *any* of the lines). WARNING: This might result in *huge* output files! Use with care.
output0 = population, expectedEnergy
// Output frequency in the time domain: write output every <num> time-step (num=1 writes every time step)
output_frequency = 1
// Frequency of writing output during optimization: write output every <num> optimization iterations. 
optim_monitor_frequency = 1
// Runtype options: "simulation" - runs a forward simulation only, "gradient" - forward simulation and gradient computation, or "optimization" - run an optimization
runtype = optimization 
// Use matrix free solver, instead of sparse matrix implementation. Only available for 2,3,4, or 5 oscillators. 
usematfree = true
// Solver type for solving the linear system at each time step, eighter 'gmres' for using Petscs GMRES solver (preferred), or 'neumann' for using Neumann series iterations
linearsolver_type = gmres
// Set maximum number of iterations for the linear solver
linearsolver_maxiter = 20
// Switch the time-stepping algorithm. Currently available: 
// "IMR" - Implicit Midpoint Rule (IMR) of 2nd order, 
// "IMR4" - Compositional IMR of order 2 using 3 stages, 
// "IMR8" - Compositional IMR of order 8 using 15 stages, 
// "EE" - Explicit Euler (discouraged)
timestepper = IMR
// For reproducability, one can choose to set a fixed seed for the random number generator
// Comment out, or set negative if seed should be random (non-reproducable)
rand_seed = 1234
