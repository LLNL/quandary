###############################################################################
# Copyright (c) 2022-23, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
###############################################################################

# We define the following GitLab pipeline variables:
variables:
# In some pipelines we create only one allocation shared among jobs in
# order to save time and resources. This allocation has to be uniquely
# named so that we are sure to retrieve it and avoid collisions.
  ALLOC_NAME: ${CI_PROJECT_NAME}_ci_${CI_PIPELINE_ID}

# Dane
# Arguments for top level allocation
  DANE_SHARED_ALLOC: "--exclusive --reservation=ci --time=15 --nodes=1"
# Arguments for job level allocation
  DANE_JOB_ALLOC: "--reservation=ci --overlap --nodes=1"
# Project specific variants for dane
  PROJECT_DANE_VARIANTS: "+test"
# Project specific deps for dane
  PROJECT_DANE_DEPS: ""

# Tioga
# Arguments for top level allocation
# OPTIONAL: "-o per-resource.count=2" allows to get 2 jobs running on each node.
  TIOGA_SHARED_ALLOC: "--queue=pci --exclusive --time-limit=20m --nodes=1 -o per-resource.count=2"
# Arguments for job level allocation
  TIOGA_JOB_ALLOC: "--nodes=1 --begin-time=+5s"
# Project specific variants for tioga
  PROJECT_TIOGA_VARIANTS: "+test"
# Project specific deps for tioga
  PROJECT_TIOGA_DEPS: ""

# Lassen uses a different job scheduler (spectrum lsf) that does not allow
# pre-allocation the same way slurm does. Arguments for job level allocation
  LASSEN_JOB_ALLOC: "1 -W 30 -q pci"
# Project specific variants for lassen
  PROJECT_LASSEN_VARIANTS: "+test"
# Project specific deps for lassen
  PROJECT_LASSEN_DEPS: "^netlib-lapack@3.9.0"

# Configuration shared by build and test jobs specific to this project.
# Not all configuration can be shared. Here projects can fine tune the
# CI behavior.
.custom_job:
  artifacts:
    reports:
      junit: junit.xml

.performance_job:
  artifacts:
    paths:
      - benchmark_results.json
  after_script:
    - |
      if [ -f "benchmark_results.json" ]; then
        echo "Sending benchmark results to GitHub..."
        BENCHMARK_DATA=$(base64 -w 0 benchmark_results.json)
        curl -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/actions/workflows/benchmark.yml/dispatches \
        -d "{\"ref\":\"${CI_COMMIT_REF_NAME}\",\"inputs\":{\"benchmark_data\":\"$BENCHMARK_DATA\"}}"
      else
        echo "benchmark_results.json not found, skipping GitHub API integration."
      fi

.reproducer_vars:
  script:
    - |
      echo -e "
      # Required variables \n
      export MODULE_LIST=\"${MODULE_LIST}\" \n
      export SPEC=\"${SPEC//\"/\\\"}\" \n
      # Allow to set job script for debugging (only this differs from CI) \n
      export DEBUG_MODE=true \n
      # Using the CI build cache is optional and requires a token. Set it like so: \n
      # export REGISTRY_TOKEN=\"<your token here>\" \n"
